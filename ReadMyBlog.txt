Title: 模块条件编译(CMake C++多态 工厂模式)

场景描述:
每年的夏天都会有台风，为了给减少台风对人类造成的损失，需要对产生自海洋的台风路径
进行预测。当前，中国，欧盟，日本，美国等各国都会有自己的台风预测部门，他们使用的
算法也不相同。
现在，需要写一个程序，该程序接受一个入参，以指示使用哪个国家的算法来预测台风。
使用c++实现，于是自然地会使用多态，建立一个基类(接口类)， 各个国家的算法类都继承自该基类。
另外，为了实现跨平台，我们采用CMake来组织编译。借助CMake可以方便地实现选择性编译，例如，你
本地有15个国家的算法实现，但是客户只需要3个国家的，于是你可以仅仅编译三个国家的算法文件，以
减少编译时间和可执行文件的大小。

Cmake选择编译的实现：
我们写一个脚本去调用cmake来生成VS工程或linux下的makefile， 脚本调用cmake时可以给cmake传入
一些变量，可以再CMakelists.txt文件中判断这些变量的值来决定是否编译某个模块。

工厂模式的技巧：
工厂类中有一个static Vector变量来存储被编译的各个算法类的信息。定义了SolutionInfo类来存储一个算法类的信息(算法的
名字，版本，指向‘创建该算法类的一个对象’的函数指针)。 在base类中定义了两个宏，第一个宏用于向具体的算法类中增加
static成员变量(一个是创建该类的对象的函数，一个是SolutionInfo对象来保存该类的信息);第二个宏用于在cpp文件中
为上述增添的第二个static变量进行初始化。
Note: 在SolutionInfo类的构造函数中会调用Factory的register函数，将其注册到Factory的static vector变量中，于是，当用户
让Factory生成某个具体的算法类时，该Factory会先检查用户索取的这个具体算法类是否存在于static vector中，当某个具体的
算法类被编译时其才会存在。

